"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[475],{2829:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(4848),t=r(8453);const i={},l="BrowserTestDriver",o={id:"modules/test-utils/browser-test-driver",title:"BrowserTestDriver",description:"A higher level helper class that inherits the BrowserDriver. Primarily intended for automating browser tests from Node.js shell scripts.",source:"@site/../docs/modules/test-utils/browser-test-driver.md",sourceDirName:"modules/test-utils",slug:"/modules/test-utils/browser-test-driver",permalink:"/probe.gl/docs/modules/test-utils/browser-test-driver",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/test-utils/browser-test-driver.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"BrowserDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-driver"},next:{title:"makeSpy",permalink:"/probe.gl/docs/modules/test-utils/make-spy"}},d={},c=[{value:"Usage",id:"usage",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"run(config : Object)",id:"runconfig--object",level:3},{value:"Built-in Exposed Globals",id:"built-in-exposed-globals",level:2},{value:"browserTestDriver_fail()",id:"browsertestdriver_fail",level:3},{value:"browserTestDriver_finish(message : String)",id:"browsertestdriver_finishmessage--string",level:3},{value:"browserTestDriver_isHeadless",id:"browsertestdriver_isheadless",level:3},{value:"browserTestDriver_captureAndDiffScreen(options : Object)",id:"browsertestdriver_captureanddiffscreenoptions--object",level:3},{value:"browserTestDriver_emulateInput(event: Object)",id:"browsertestdriver_emulateinputevent-object",level:3},{value:"keypress",id:"keypress",level:4},{value:"click",id:"click",level:4},{value:"mousemove",id:"mousemove",level:4},{value:"drag",id:"drag",level:4}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"browsertestdriver",children:"BrowserTestDriver"})}),"\n",(0,n.jsxs)("p",{class:"badges",children:[(0,n.jsx)("img",{src:"https://img.shields.io/badge/Node.js-v8.0-blue.svg?style=flat-square",alt:"Node"}),(0,n.jsx)("img",{src:"https://img.shields.io/badge/Chrome-v64+-blue.svg?style=flat-square",alt:"Node"})]}),"\n",(0,n.jsxs)(s.p,{children:["A higher level helper class that inherits the ",(0,n.jsx)(s.a,{href:"/docs/modules/test-utils/browser-driver",children:(0,n.jsx)(s.code,{children:"BrowserDriver"})}),". Primarily intended for automating browser tests from Node.js shell scripts."]}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.code,{children:"BrowserTestDriver"})," starts a Chromium browser instance and a server and opens a page with a URL that loads a script from the server. The script that runs in the browser is expected to report test results back using predefined global functions."]}),"\n",(0,n.jsxs)(s.p,{children:["To use this class, ",(0,n.jsx)(s.a,{href:"https://www.npmjs.com/package/puppeteer",children:"puppeteer"})," and ",(0,n.jsx)(s.a,{href:"https://www.npmjs.com/package/pixelmatch",children:"pixelmatch"})," must be installed as dev dependencies."]}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(s.p,{children:"In your node.js start script:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"// This is the script that runs in Node.js and starts the browser\nconst {BrowserTestDriver} = require('@probe.gl/test-utils');\nnew BrowserTestDriver().run({\n  server: {\n    command: 'webpack-dev-server',\n    arguments: ['--env.browser-test']\n  },\n  headless: true\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:"In your script that is run on the browser:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"// Polyfill so that the bundle can execute in browsers not controlled by puppeteer\nrequire('@probe.gl/test-utils/polyfill');\n// Run test cases\n...\n// App is done running, terminate the browser instance\nwindow.browserTestDriver_finish('All tests passed');\n"})}),"\n",(0,n.jsx)(s.h2,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"const browserTestDriver = new BrowserTestDriver(opts);\n"})}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"opts"})," (Object)","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"id"})," (String) - an id for this ",(0,n.jsx)(s.code,{children:"BrowserTestDriver"})," instance. Default ",(0,n.jsx)(s.code,{children:"browser-driver"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"runconfig--object",children:"run(config : Object)"}),"\n",(0,n.jsx)(s.p,{children:"Runs the tests:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Starts a Chromium browser instance."}),"\n",(0,n.jsx)(s.li,{children:"Starts a dev server, e.g. a webpack-dev-server that bundles a test script."}),"\n",(0,n.jsx)(s.li,{children:"Opens a browser page to run the test script."}),"\n",(0,n.jsx)(s.li,{children:"Extracts test reports from the browser back into node"}),"\n",(0,n.jsx)(s.li,{children:"Closes browser, server and terminates the current node script."}),"\n",(0,n.jsx)(s.li,{children:"Passes an exit status (e.g. pass/fail) back to the invoking shell."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"title"})," (String) - name of the test, e.g. ",(0,n.jsx)(s.code,{children:"'Unit tests'"}),". Default ",(0,n.jsx)(s.code,{children:"'Browser Test'"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"headless"})," (Boolean) - whether to run the test in headless mode. If ",(0,n.jsx)(s.code,{children:"true"}),", all console outputs from the test app will be piped to the shell. If ",(0,n.jsx)(s.code,{children:"false"}),", the browser window will remain open for debugging."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"server"})," (Object|Function|",(0,n.jsx)(s.code,{children:"false"}),")","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["If an object is supplied: used as options to create a dev server. Passed to ",(0,n.jsx)(s.a,{href:"/docs/modules/test-utils/browser-driver",children:"BroserDriver.startServer"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["If a function is supplied: will be called to create a dev server. Should return a ",(0,n.jsx)(s.code,{children:"Promise"})," that resolves to the service URL."]}),"\n",(0,n.jsxs)(s.li,{children:["If ",(0,n.jsx)(s.code,{children:"false"}),": no dev server."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"browser"})," (Object) - options to user for creating the Puppeteer instance. Passed to ",(0,n.jsx)(s.a,{href:"/docs/modules/test-utils/browser-driver",children:"BroserDriver.startBrowser"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"exposeFunctions"})," (Object) - keys are function names to be added to the page's ",(0,n.jsx)(s.code,{children:"window"})," object, and the values are callback functions to execute in Node.js. See ",(0,n.jsx)(s.a,{href:"https://github.com/GoogleChrome/puppeteer/blob/v1.11.0/docs/api.md#pageexposefunctionname-puppeteerfunction",children:"exposeFunction"})," for details."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"url"})," (String) - if supplied, will be used instead of the URL returned by the dev server."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"maxConsoleMessageLength"})," (Number) - used in ",(0,n.jsx)(s.code,{children:"headless: true"})," mode to crop log messages that are piped to the console. Default ",(0,n.jsx)(s.code,{children:"500"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"onStart"})," (Function) - callback when the page is ready and before the test starts running. Receives the following arguments:","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"page"})," (",(0,n.jsx)(s.a,{href:"https://pptr.dev/api/puppeteer.page",children:"Puppeteer.Page"}),") - the browser page instance"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"onFinish"})," (Function) - callback when the test finishes running and the browser is about to close. Receives the following arguments:","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"page"})," (",(0,n.jsx)(s.a,{href:"https://pptr.dev/api/puppeteer.page",children:"Puppeteer.Page"}),") - the browser page instance"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"isSuccessful"})," (Boolean) - if all tests passed."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"built-in-exposed-globals",children:"Built-in Exposed Globals"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"BrowserTestDriver"})," instance exposes a series of global functions to the browser application.\nThe following functions can be called from the browser application to communicate with the nodejs script:"]}),"\n",(0,n.jsx)(s.h3,{id:"browsertestdriver_fail",children:"browserTestDriver_fail()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"window.browserTestDriver_fail();\n"})}),"\n",(0,n.jsx)(s.p,{children:"Notify the node script that some test has failed."}),"\n",(0,n.jsx)(s.h3,{id:"browsertestdriver_finishmessage--string",children:"browserTestDriver_finish(message : String)"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"window.browserTestDriver_finish('Congratulations! All tests passed.');\n"})}),"\n",(0,n.jsx)(s.p,{children:"Notify the node script that the app has finished executing and the browser should be closed."}),"\n",(0,n.jsx)(s.h3,{id:"browsertestdriver_isheadless",children:"browserTestDriver_isHeadless"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"if (window.browserTestDriver_isHeadless) {\n  console.log('Test is running in headless mode');\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:"Truthy if the current test environment is headless."}),"\n",(0,n.jsx)(s.h3,{id:"browsertestdriver_captureanddiffscreenoptions--object",children:"browserTestDriver_captureAndDiffScreen(options : Object)"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"window.browserTestDriver_captureAndDiffScreen({\n  goldenImage: './golden-images/map.png',\n  region: {x: 0, y: 0, width: 800, height: 600},\n  threshold: 0.99\n}).then(result => {\n  // do something\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:'Request a pixel diff between the current page and a reference "golden image." This can be used to verify that the page is visually rendered as expected.'}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"goldenImage"})," (String) - path to the golden image, relative to the directory where the shell command is executed"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"region"})," (Object, optional) - a bounding box to take a screenshot of. In shape of ",(0,n.jsx)(s.code,{children:"{x, y, width, height}"})," relative to the page. If not specified, will take a screenshot of the whole page."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"threshold"})," (Number, optional) - the matching score for the test to pass. Between ",(0,n.jsx)(s.code,{children:"0"})," (no pixels matched) to ",(0,n.jsx)(s.code,{children:"1"})," (all pixels matched). Default ",(0,n.jsx)(s.code,{children:"0.99"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"tolerance"})," (Number, optional) - the tolerance when comparing two pixels. Between ",(0,n.jsx)(s.code,{children:"0"})," (strict color match) to ",(0,n.jsx)(s.code,{children:"1"})," (anything will pass). Default ",(0,n.jsx)(s.code,{children:"0.1"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"includeAA"})," (Boolean, optional) - If ",(0,n.jsx)(s.code,{children:"true"}),", all pixels are compared. Otherwise detect and ignore anti-aliased pixels. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"includeEmpty"})," (Boolean, optional) - If ",(0,n.jsx)(s.code,{children:"true"}),", the matching score is calculated as a percentage of all pixels. If ",(0,n.jsx)(s.code,{children:"false"}),", empty pixels (alpha 0) will be excluded, potentially make the score lower. Default ",(0,n.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"createDiffImage"})," (Boolean, optional) - if ",(0,n.jsx)(s.code,{children:"true"}),", will generate binary image data that highlight the mismatched pixels. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"saveOnFail"})," (Boolean, optional) - if ",(0,n.jsx)(s.code,{children:"true"}),", any screenshots that failed to meet the target matching rate will be saved to disk for further investigation. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"saveAs"})," (String, optional) - the filename to save the screenshot as. If the string contains ",(0,n.jsx)(s.code,{children:"[name]"}),", it will be replaced by the golden image path. Default ",(0,n.jsx)(s.code,{children:"[name]-failed.png"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Returns: a ",(0,n.jsx)(s.code,{children:"Promise"})," that resolves to an object with the following fields:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"success"})," (Boolean) - whether the test passed. A test can fail either because the matching score is lower than the specified ",(0,n.jsx)(s.code,{children:"threshold"}),", or an unexpected error occurred."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"headless"})," (Boolean) - whether the browser was running in headless mode."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"match"})," (Number) - the matching score. Between ",(0,n.jsx)(s.code,{children:"0"})," (no pixels matched) to ",(0,n.jsx)(s.code,{children:"1"})," (all pixels matched)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"matchPercentage"})," (String) - ",(0,n.jsx)(s.code,{children:"match"})," formatted in percentage form."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"diffImage"})," (Uint8Array) - image data that highlight the mismatched pixels. Only if ",(0,n.jsx)(s.code,{children:"createDiffImage: true"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"error"})," (String) - error message if any."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"browsertestdriver_emulateinputevent-object",children:"browserTestDriver_emulateInput(event: Object)"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"window.browserTestDriver_emulateInput({\n  type: 'keypress',\n  key: 's',\n  ctrlKey: true\n}).then(result => {\n  // ctrl + S is pressed! do something\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:"Dispatch an emulated user input to the page. The following event types are supported:"}),"\n",(0,n.jsx)(s.h4,{id:"keypress",children:"keypress"}),"\n",(0,n.jsx)(s.p,{children:"Press a key on the keyboard."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"type: 'keypress'"})}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"key"})," (String) - see ",(0,n.jsx)(s.a,{href:"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js",children:"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"delay"})," (Number) - the time between keydown and keyup. Default ",(0,n.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"shiftKey"})," (Boolean) - whether to press the key with the shift key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"ctrlKey"})," (Boolean) - whether to press the key with the control key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"metaKey"})," (Boolean) - whether to press the key with the meta key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.h4,{id:"click",children:"click"}),"\n",(0,n.jsx)(s.p,{children:"Click the mouse at a given screen coordinate."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"type: 'click'"})}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"x"})," (Number) - the screen x of the click."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"y"})," (Number) - the screen y of the click."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"button"})," (String) - ",(0,n.jsx)(s.code,{children:"'left'"}),", ",(0,n.jsx)(s.code,{children:"'right'"})," or ",(0,n.jsx)(s.code,{children:"'middle'"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"delay"})," (Number) - the time between mousedown and mouseup. Default ",(0,n.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"shiftKey"})," (Boolean) - whether to click with the shift key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"ctrlKey"})," (Boolean) - whether to click with the control key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"metaKey"})," (Boolean) - whether to click with the meta key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.h4,{id:"mousemove",children:"mousemove"}),"\n",(0,n.jsx)(s.p,{children:"Move the mouse to a given screen coordinate."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"type: 'mousemove'"})}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"x"})," (Number) - the screen x to move the pointer to."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"y"})," (Number) - the screen y to move the pointer to."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"steps"})," (Number) - how many intermediate mousemove events to generate, default ",(0,n.jsx)(s.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.h4,{id:"drag",children:"drag"}),"\n",(0,n.jsx)(s.p,{children:"Drag the mouse from a given screen coordinate to another."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"type: 'drag'"})}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"startX"})," (Number) - the screen x to drag from."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"startY"})," (Number) - the screen y to drag from."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"endX"})," (Number) - the screen x to drag to."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"endY"})," (Number) - the screen y to drag to."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"button"})," (String) - ",(0,n.jsx)(s.code,{children:"'left'"}),", ",(0,n.jsx)(s.code,{children:"'right'"})," or ",(0,n.jsx)(s.code,{children:"'middle'"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"steps"})," (Number) - how many intermediate mousemove events to generate, default ",(0,n.jsx)(s.code,{children:"1"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"shiftKey"})," (Boolean) - whether to drag with the shift key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"ctrlKey"})," (Boolean) - whether to drag with the control key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"metaKey"})," (Boolean) - whether to drag with the meta key down. Default ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>o});var n=r(6540);const t={},i=n.createContext(t);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);