"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[89],{5680:(e,r,n)=>{n.d(r,{xA:()=>u,yg:()=>b});var t=n(6540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,b=c["".concat(s,".").concat(d)]||c[d]||g[d]||a;return n?t.createElement(b,i(i({ref:r},u),{},{components:n})):t.createElement(b,i({ref:r},u))}));function b(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7869:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=n(9668),o=(n(6540),n(5680));const a={},i="Usage",l={unversionedId:"get-started/adding-probes",id:"get-started/adding-probes",title:"Usage",description:"Configure instrumentation level using URL parameters.",source:"@site/../docs/get-started/adding-probes.md",sourceDirName:"get-started",slug:"/get-started/adding-probes",permalink:"/probe.gl/docs/get-started/adding-probes",draft:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/get-started/adding-probes.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/probe.gl/docs/get-started/"},next:{title:"Console Logging",permalink:"/probe.gl/docs/articles/about-logging"}},s={},p=[{value:"Configure instrumentation level using URL parameters.",id:"configure-instrumentation-level-using-url-parameters",level:2},{value:"Read configuration to enable/disable features in development",id:"read-configuration-to-enabledisable-features-in-development",level:3},{value:"Probe and production code",id:"probe-and-production-code",level:3},{value:"Access to Probe in the debugger",id:"access-to-probe-in-the-debugger",level:3},{value:"Access to your own functions in the debugger",id:"access-to-your-own-functions-in-the-debugger",level:3},{value:"Profiling Support",id:"profiling-support",level:3},{value:"Cross-Module Profiling",id:"cross-module-profiling",level:4},{value:"Warning and Error Handlers",id:"warning-and-error-handlers",level:3}],u={toc:p},c="wrapper";function g(e){let{components:r,...n}=e;return(0,o.yg)(c,(0,t.A)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"usage"},"Usage"),(0,o.yg)("h2",{id:"configure-instrumentation-level-using-url-parameters"},"Configure instrumentation level using URL parameters."),(0,o.yg)("p",null,"Probe can be enabled in code or in the Chrome console at runtime. Because Probe\nstores its state in a cookie, enabling or disabling Probe or specific options\npersists across browser sessions."),(0,o.yg)("p",null,"Enable Probe logging and features:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Probe.enable();\n")),(0,o.yg)("p",null,"Set levels:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Probe.setLevel(2);\n")),(0,o.yg)("p",null,"Most Probe config methods are chainable:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Probe.enable().setLevel(2).configure({isPrintEnabled: false});\n")),(0,o.yg)("h3",{id:"read-configuration-to-enabledisable-features-in-development"},"Read configuration to enable/disable features in development"),(0,o.yg)("p",null,"In your code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"import Probe from `probe.gl`;\n\nif (Probe.getOption('myFeature')) {\n  enableFeature();\n}\n")),(0,o.yg)("p",null,"In the console, for development testing:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Probe.configure({mySnazzyFeature: true});\n")),(0,o.yg)("h3",{id:"probe-and-production-code"},"Probe and production code"),(0,o.yg)("p",null,"Probe is designed so that you have the option of keeping your instrumentation\nin production code. Unless you enable Probe, all Probe methods effectively\nbecome no-ops."),(0,o.yg)("h3",{id:"access-to-probe-in-the-debugger"},"Access to Probe in the debugger"),(0,o.yg)("p",null,"Probe does not attach itself to the ",(0,o.yg)("inlineCode",{parentName:"p"},"window")," context by default. You may want to\ndo this when your app is initialized:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"import Probe from `probe.gl`;\nwindow.Probe = Probe;\n")),(0,o.yg)("h3",{id:"access-to-your-own-functions-in-the-debugger"},"Access to your own functions in the debugger"),(0,o.yg)("p",null,"If you want to access your functions in the browser console, simply attach\nthem to the Probe scope and they will be available on the ",(0,o.yg)("inlineCode",{parentName:"p"},"Probe")," global\nvariable."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"import AppStore from './store';\nProbe.getAppState() {\n  console.log(JSON.stringify(AppStore.getState(), null, '  '));\n}\n")),(0,o.yg)("h3",{id:"profiling-support"},"Profiling Support"),(0,o.yg)("p",null,'Profiling is primary purpose of the probe library. It has a complement of\nmethods (i.e. "probes") that you can add to your application to log\ntimings. Each method comes in several variants, which correspond to three\ndifferent log levels, allowing you to control the amount of log detail\nby setting the probe level.'),(0,o.yg)("h4",{id:"cross-module-profiling"},"Cross-Module Profiling"),(0,o.yg)("p",null,"Probe uses global data to ensure that you are working\nagainst the same clocks even if you happen to load multiple instances\nor versions of the probe module in different modules."),(0,o.yg)("h3",{id:"warning-and-error-handlers"},"Warning and Error Handlers"),(0,o.yg)("p",null,"Probe contains a number of optional console intercepts that can be\nenabled to:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Treat warnings as hard errors (i.e exceptions that can trigger breakpoints)"),(0,o.yg)("li",{parentName:"ul"},"Break on warnings and errors (Probe can trigger the debugger directly)"),(0,o.yg)("li",{parentName:"ul"},"Detect rejected promise errors - optionally\ncalling window.onerror with the error or calling the proposed\nrejected promise handler.")))}g.isMDXComponent=!0}}]);