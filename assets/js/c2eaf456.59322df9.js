"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[657],{6744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>a});var i=t(4848),s=t(8453);const d={},c="Stat",r={id:"modules/stats/stat",title:"Stat",description:"A tracker for a single statistic.",source:"@site/../docs/modules/stats/stat.md",sourceDirName:"modules/stats",slug:"/modules/stats/stat",permalink:"/probe.gl/docs/modules/stats/stat",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/stats/stat.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Log",permalink:"/probe.gl/docs/modules/log/"},next:{title:"Stats",permalink:"/probe.gl/docs/modules/stats/"}},l={},a=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"name : String",id:"name--string",level:3},{value:"count : Number",id:"count--number",level:3},{value:"time : Number",id:"time--number",level:3},{value:"lastTiming : Number",id:"lasttiming--number",level:3},{value:"lastSampleTime : Number",id:"lastsampletime--number",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"incrementCount",id:"incrementcount",level:3},{value:"decrementCount",id:"decrementcount",level:3},{value:"addCount",id:"addcount",level:3},{value:"subtractCount",id:"subtractcount",level:3},{value:"timeStart",id:"timestart",level:3},{value:"timeEnd",id:"timeend",level:3},{value:"addTime",id:"addtime",level:3},{value:"getHz",id:"gethz",level:3},{value:"getAverageTime",id:"getaveragetime",level:3},{value:"getAverageCount",id:"getaveragecount",level:3},{value:"getSampleHz",id:"getsamplehz",level:3},{value:"getSampleAverageTime",id:"getsampleaveragetime",level:3},{value:"getSampleAverageCount",id:"getsampleaveragecount",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stat",children:"Stat"})}),"\n",(0,i.jsx)(n.p,{children:"A tracker for a single statistic."}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"Stat"})," instance using ",(0,i.jsx)(n.code,{children:"Stats.get"}),". There are two basic usage patterns, ",(0,i.jsx)(n.code,{children:"timer"})," and ",(0,i.jsx)(n.code,{children:"counter"}),".\n",(0,i.jsx)(n.code,{children:"Timer"})," usage involves the methods ",(0,i.jsx)(n.code,{children:"timeStart"}),", ",(0,i.jsx)(n.code,{children:"timeEnd"}),", ",(0,i.jsx)(n.code,{children:"addTime"}),", ",(0,i.jsx)(n.code,{children:"getHz"}),", and ",(0,i.jsx)(n.code,{children:"getAverageTime"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import {Stats} from '@probe.gl/stats';\n\nconst stats = new Stats({id: 'my-stats'});\nconst executionTime = stats.get('Time');\nexecutionTime.timeStart();\nexecutionTime.timeEnd();\nexecutionTime.addTime(16);\n\n// getHz and getAverageTime based on the\n// number of individual timings that were taken\nexecutionTime.getHz();\nexecutionTime.getAverageTime();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Counter"})," usage involves the methods ",(0,i.jsx)(n.code,{children:"incrementCount"}),", ",(0,i.jsx)(n.code,{children:"decrementCount"}),", ",(0,i.jsx)(n.code,{children:"addCount"}),", and ",(0,i.jsx)(n.code,{children:"subtractCount"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const stats = new Stats({id: 'my-stats'});\nconst memoryUsage = stats.get('Mem');\nmemoryUsage.incrementCount();\nmemoryUsage.decrementCount();\nmemoryUsage.addCount(1024);\nmemoryUsage.subtractCount(512);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For time statistics, the ",(0,i.jsx)(n.code,{children:"Stat"})," object can also define a sample window, to only update ",(0,i.jsx)(n.code,{children:"count"})," or ",(0,i.jsx)(n.code,{children:"time"})," after a given number of samples are taken:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const stats = new Stats({id: 'my-stats'});\nconst executionTime = stats.get('Time').setSampleSize(3);\nexecutionTime.addTime(1);\nexecutionTime.addTime(2);\n// `time` is still 0 at this point\nexecutionTime.getHz();          // => 0\nexecutionTime.getAverageTime(); // => 0\n\nexecutionTime.addTime(3);\n// Now `time` = 6\nexecutionTime.getAverageTime(); // => 2\nexecutionTime.addTime(1);\nexecutionTime.addTime(1);\nexecutionTime.addTime(1);\nexecutionTime.getAverageTime();       // => 1.5\nexecutionTime.getSampleAverageTime(); // => 1 (only from the last sample set)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h3,{id:"name--string",children:"name : String"}),"\n",(0,i.jsx)(n.p,{children:"Name of the stat."}),"\n",(0,i.jsx)(n.h3,{id:"count--number",children:"count : Number"}),"\n",(0,i.jsx)(n.p,{children:"Accumulated count or number of timings."}),"\n",(0,i.jsx)(n.h3,{id:"time--number",children:"time : Number"}),"\n",(0,i.jsx)(n.p,{children:"Accumulated time from all timings."}),"\n",(0,i.jsx)(n.h3,{id:"lasttiming--number",children:"lastTiming : Number"}),"\n",(0,i.jsx)(n.p,{children:"Last timing taken."}),"\n",(0,i.jsx)(n.h3,{id:"lastsampletime--number",children:"lastSampleTime : Number"}),"\n",(0,i.jsx)(n.p,{children:"Timing of the last completed set of samples."}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"constructor",children:"constructor"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"new Stat(name, type)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," (",(0,i.jsx)(n.code,{children:"String"}),") - the name of the stat."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," (",(0,i.jsx)(n.code,{children:"String"}),") - the type of the stat."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Supported options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"count"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"averageTime"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"totalTime"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"fps"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"memory"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"incrementcount",children:"incrementCount"}),"\n",(0,i.jsxs)(n.p,{children:["Increase ",(0,i.jsx)(n.code,{children:"count"})," by ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.incrementCount()"})}),"\n",(0,i.jsx)(n.h3,{id:"decrementcount",children:"decrementCount"}),"\n",(0,i.jsxs)(n.p,{children:["Decrease ",(0,i.jsx)(n.code,{children:"count"})," by ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.decrementCount()"})}),"\n",(0,i.jsx)(n.h3,{id:"addcount",children:"addCount"}),"\n",(0,i.jsxs)(n.p,{children:["Increase ",(0,i.jsx)(n.code,{children:"count"})," by ",(0,i.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.addCount(value)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," (",(0,i.jsx)(n.code,{children:"Number"}),", required) - the amount to add to ",(0,i.jsx)(n.code,{children:"count"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"subtractcount",children:"subtractCount"}),"\n",(0,i.jsxs)(n.p,{children:["Decrease ",(0,i.jsx)(n.code,{children:"count"})," by ",(0,i.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.subtractCount(value)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," (",(0,i.jsx)(n.code,{children:"Number"}),", required) - the amount to subtract from ",(0,i.jsx)(n.code,{children:"count"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"timestart",children:"timeStart"}),"\n",(0,i.jsx)(n.p,{children:"Start a timer."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.timeStart()"})}),"\n",(0,i.jsx)(n.h3,{id:"timeend",children:"timeEnd"}),"\n",(0,i.jsxs)(n.p,{children:["End a timer. Time elapsed since the last ",(0,i.jsx)(n.code,{children:"timeStart"})," is\nadded to ",(0,i.jsx)(n.code,{children:"time"})," and ",(0,i.jsx)(n.code,{children:"count"})," is incremented by ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.timeEnd()"})}),"\n",(0,i.jsx)(n.h3,{id:"addtime",children:"addTime"}),"\n",(0,i.jsxs)(n.p,{children:["Increase ",(0,i.jsx)(n.code,{children:"time"})," by ",(0,i.jsx)(n.code,{children:"value"})," and increment ",(0,i.jsx)(n.code,{children:"count"})," by ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.addTime(value)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," (",(0,i.jsx)(n.code,{children:"Number"}),", required) - time in millisecons to add to ",(0,i.jsx)(n.code,{children:"time"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"gethz",children:"getHz"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average number of timing events per second (i.e. ",(0,i.jsx)(n.code,{children:"samples / (time * 1000)"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getHz()"})}),"\n",(0,i.jsx)(n.h3,{id:"getaveragetime",children:"getAverageTime"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average amount of time take per timing event in milliseconds (i.e. ",(0,i.jsx)(n.code,{children:"time / samples"}),")."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getAverageTime()"})}),"\n",(0,i.jsx)(n.h3,{id:"getaveragecount",children:"getAverageCount"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average count per sampling (i.e. ",(0,i.jsx)(n.code,{children:"count / samples"}),")."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getAverageCount()"})}),"\n",(0,i.jsx)(n.h3,{id:"getsamplehz",children:"getSampleHz"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average number of timing events per second (i.e. ",(0,i.jsx)(n.code,{children:"samples / (time * 1000)"})," for the last completed set of samples."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getHz()"})}),"\n",(0,i.jsx)(n.h3,{id:"getsampleaveragetime",children:"getSampleAverageTime"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average amount of time take per timing event in milliseconds (i.e. ",(0,i.jsx)(n.code,{children:"time / samples"}),") for the last completed set of samples."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getAverageTime()"})}),"\n",(0,i.jsx)(n.h3,{id:"getsampleaveragecount",children:"getSampleAverageCount"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate the average count per sampling (i.e. ",(0,i.jsx)(n.code,{children:"count / samples"}),") for the last completed set of samples."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stat.getAverageTime()"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var i=t(6540);const s={},d=i.createContext(s);function c(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);