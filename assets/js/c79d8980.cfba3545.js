"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[727],{3304:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var t=s(4848),l=s(8453);const r={},i="makeSpy",d={id:"modules/test-utils/make-spy",title:"makeSpy",description:"A spy utility that wraps a function. The wrapper is invisible: when called the wrapper calls the original function and returns the return value.",source:"@site/../docs/modules/test-utils/make-spy.md",sourceDirName:"modules/test-utils",slug:"/modules/test-utils/make-spy",permalink:"/probe.gl/docs/modules/test-utils/make-spy",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/test-utils/make-spy.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"BrowserTestDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-test-driver"},next:{title:"enableDOMLogging (experimental)",permalink:"/probe.gl/docs/modules/test-utils/log-to-dom"}},c={},o=[{value:"Usage",id:"usage",level:2},{value:"Function",id:"function",level:2},{value:"makeSpy",id:"makespy-1",level:3},{value:"Methods and fields on the Wrapped Function",id:"methods-and-fields-on-the-wrapped-function",level:2},{value:"called",id:"called",level:3},{value:"callCount",id:"callcount",level:3},{value:"reset()",id:"reset",level:3},{value:"returns",id:"returns",level:3},{value:"restore",id:"restore",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"makespy",children:"makeSpy"})}),"\n",(0,t.jsx)(n.p,{children:"A spy utility that wraps a function. The wrapper is invisible: when called the wrapper calls the original function and returns the return value."}),"\n",(0,t.jsx)(n.p,{children:"However it also updates certain metadata that can be inspected later, that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"lets you determine if the wrapped function or method was actually called during execution of other code."}),"\n",(0,t.jsx)(n.li,{children:"allows you to inspect how many times it was called."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Spies also have facilities for mocking, allowing the test suite to override the functions return value to trigger certain conditions."}),"\n",(0,t.jsxs)(n.p,{children:["There are also ",(0,t.jsx)(n.code,{children:"restore"})," and ",(0,t.jsx)(n.code,{children:"reset"})," methods that allows you to reset the test status."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"Override function return value"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {makeSpy} from '@probe.gl/test-utils';\nconst spy = makeSpy(Class, 'method');\nspy.returns(false);\n// Call code that calls the wrapped method.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"function",children:"Function"}),"\n",(0,t.jsx)(n.h3,{id:"makespy-1",children:"makeSpy"}),"\n",(0,t.jsx)(n.p,{children:"Signatures"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spy()"})," - just an empty function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spy(func)"})," - wraps a function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spy(obj, func)"})," - wraps a method"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Attach a spy to the function. The spy has the following methods and fields"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"called"})," - whether spy was called"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callCount"})," - number of calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"restore()"})," - remove spy completely"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"reset()"})," - reset call count"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods-and-fields-on-the-wrapped-function",children:"Methods and fields on the Wrapped Function"}),"\n",(0,t.jsx)(n.h3,{id:"called",children:"called"}),"\n",(0,t.jsx)(n.p,{children:"Boolean, true if function was called"}),"\n",(0,t.jsx)(n.h3,{id:"callcount",children:"callCount"}),"\n",(0,t.jsxs)(n.p,{children:["Number, number of times spy was called, ",(0,t.jsx)(n.code,{children:"0"})," if not called"]}),"\n",(0,t.jsx)(n.h3,{id:"reset",children:"reset()"}),"\n",(0,t.jsxs)(n.p,{children:["Resets the ",(0,t.jsx)(n.code,{children:"called"})," and ",(0,t.jsx)(n.code,{children:"callCount"})," flags (to ",(0,t.jsx)(n.code,{children:"false"})," and ",(0,t.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"returns",children:"returns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"spy.returns(returnValue)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Makes the wrapper function return the given value without calling the wrapped function."}),"\n",(0,t.jsx)(n.h3,{id:"restore",children:"restore"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"spy.restore()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Removes the spy from the function being spied on."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(6540);const l={},r=t.createContext(l);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);