"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[980],{4829:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var n=s(4848),d=s(8453);const r={},i="StatsWidget",c={id:"modules/stats-widget/stats-widget",title:"StatsWidget",description:"A widget that displays the state of a probe.gl Stats object to screen.",source:"@site/../docs/modules/stats-widget/stats-widget.md",sourceDirName:"modules/stats-widget",slug:"/modules/stats-widget/",permalink:"/probe.gl/docs/modules/stats-widget/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/stats-widget/stats-widget.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Stats",permalink:"/probe.gl/docs/modules/stats/"},next:{title:"Bench",permalink:"/probe.gl/docs/modules/bench/"}},a={},o=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"setStats",id:"setstats",level:3},{value:"setFormatter",id:"setformatter",level:3},{value:"update",id:"update",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"statswidget",children:"StatsWidget"})}),"\n",(0,n.jsxs)(t.p,{children:["A widget that displays the state of a probe.gl ",(0,n.jsx)(t.code,{children:"Stats"})," object to screen."]}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(t.p,{children:["Create a ",(0,n.jsx)(t.code,{children:"StatsWidget"})," HTML element to display tracked ",(0,n.jsx)(t.code,{children:"Stats"}),". Each ",(0,n.jsx)(t.code,{children:"Stat"})," can\nbe associated with a ",(0,n.jsx)(t.code,{children:"formatter"})," that indicates how it should be displayed."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import React, {Component} from 'react';\nimport {Stats} from '@probe.gl/stats';\nimport StatsWidget from '@probe.gl/stats-widget';\n\nclass App extends Component {\n  componentDidMount() {\n    this._stats = new Stats({\n      id: 'My Stats'\n    });\n\n    this._statsWidget = new StatsWidget(this._stats, {\n      container: this._containerRef\n    });\n\n    this.setState({intervalId: setInterval(this._update, 300)});\n  }\n\n  componentWillUnmount() {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n\n  _update() {\n    // create a stat with name and type\n    const counter = this._stats.get('Counter', 'count');\n    counter.incrementCount();\n    this._statsWidget.update();\n  }\n\n  render() {\n    return (<div ref={_ => this._containerRef = _}/>);\n  }\n}\n\n"})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"new StatsWidget(stats, options)"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"stats"})," (",(0,n.jsx)(t.code,{children:"Stats"}),") - a probe.gl ",(0,n.jsx)(t.code,{children:"Stats"})," instance."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"options"}),": (",(0,n.jsx)(t.code,{children:"Object"}),")","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"title"})," (",(0,n.jsx)(t.code,{children:"String"}),") - header text for the widget. Defaults to the ",(0,n.jsx)(t.code,{children:"id"})," of the ",(0,n.jsx)(t.code,{children:"Stats"})," object."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"framesPerUpdate"})," (",(0,n.jsx)(t.code,{children:"Number"}),") - number of times ",(0,n.jsx)(t.code,{children:"update"})," must be called before the widget is re-rendered. Allows the application\nto call ",(0,n.jsx)(t.code,{children:"update"})," each frame with re-renders occurring at a slower rate."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"container"})," (DOMElement) - DOM element to use as container for the widget. Will be created internally if not provided."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"css"})," (",(0,n.jsx)(t.code,{children:"Object"}),") - css properties to apply to the container ",(0,n.jsx)(t.code,{children:"div"})," of the widget. Two special keys can be used to modify the\nstyle of nested elements:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"header"})," (",(0,n.jsx)(t.code,{children:"Object"}),") - css properties to apply to the header ",(0,n.jsx)(t.code,{children:"div"})," of the widget."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"item"})," (",(0,n.jsx)(t.code,{children:"Object"}),") - css properties to apply to the individual item ",(0,n.jsx)(t.code,{children:"div"}),"s for each stat displayed in the widget."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"formatters"})," (",(0,n.jsx)(t.code,{children:"Object"}),") - text formatters to use to display a stat. Keys are the stat's ",(0,n.jsx)(t.code,{children:"name"}),". Value can either be\na function that takes a single ",(0,n.jsx)(t.code,{children:"stat"})," object as argument, or one of the following strings:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"count"}),": Display as a simple count."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"averageTime"}),": Display average time."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"totalTime"}),": Display total time."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"fps"}),": Display Hz as a frame rate."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"memory"}),": Display count as a memory measurement.\n",(0,n.jsx)(t.code,{children:"resetOnUpdate"})," (",(0,n.jsx)(t.code,{children:"Object"}),") - whether the a stat should be reset each time the widget is re-rendered. Keyed by the stat's ",(0,n.jsx)(t.code,{children:"name"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"setstats",children:"setStats"}),"\n",(0,n.jsx)(t.p,{children:"Set Stats object rendered by the widget."}),"\n",(0,n.jsx)(t.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"stats"})," () - ",(0,n.jsx)(t.a,{href:"https://github.com/uber-web/probe.gl/blob/master/docs/api-reference/log/stats.md",children:(0,n.jsx)(t.code,{children:"Stats"})})," Object."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"setformatter",children:"setFormatter"}),"\n",(0,n.jsx)(t.p,{children:"Set the formatter associated with a given stat."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"statsWidget.setFormatter(name, formatter)"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"name"})," (",(0,n.jsx)(t.code,{children:"String"}),", required) - the name of the stat to associate with a formatter."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"formatter"})," (",(0,n.jsx)(t.code,{children:"Function"}),", required) - function that takes a ",(0,n.jsx)(t.code,{children:"Stat"})," object and returns a string."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"update",children:"update"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"statsWidget.update()"})}),"\n",(0,n.jsx)(t.p,{children:"Rerender the widget."})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var n=s(6540);const d={},r=n.createContext(d);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);