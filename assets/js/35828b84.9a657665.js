"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[331],{8351:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(4848),s=n(8453);const i={},r="Problems with Console Logging",l={id:"articles/issues-with-logging",title:"Problems with Console Logging",description:"Whether to use a library like probe.gl to improve on the browser's built-in console logging tends to be a personal preference, and people tend to have strong opinions on the matter. The question is obvious: the browser already provides a logging facility, why spend effort and code bloat wrapping it?",source:"@site/../docs/articles/issues-with-logging.md",sourceDirName:"articles",slug:"/articles/issues-with-logging",permalink:"/probe.gl/docs/articles/issues-with-logging",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/articles/issues-with-logging.md",tags:[],version:"current",frontMatter:{}},a={},c=[];function g(e){const o={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"problems-with-console-logging",children:"Problems with Console Logging"})}),"\n",(0,t.jsx)(o.p,{children:"Whether to use a library like probe.gl to improve on the browser's built-in console logging tends to be a personal preference, and people tend to have strong opinions on the matter. The question is obvious: the browser already provides a logging facility, why spend effort and code bloat wrapping it?"}),"\n",(0,t.jsx)(o.p,{children:'To illustrate some of the problems probe.gl is attempting to solve, let\'s consider how one would write a simple logging wrapper for an app that had started logging using the "raw" console API.'}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:"function app() {\n  console.debug('hello world')\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Let's say we want a function that logs conditionally (only if a ",(0,t.jsx)(o.code,{children:"priority"})," has been set), and only issues a warning once to avoid flooding the console. A first attempt could look like this"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:"function log(priority, message) {\n  if (priority <= logPriority)\n  \tif (!cache[message]) {\n  \t  console.debug(message);\n  \t}\n  }\n}\n...\napp() {\n  log(1, 'hello world');\n}\n"})}),"\n",(0,t.jsx)(o.p,{children:"Some issues with this:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"Now the log message in Chrome console no longer let's you click back to the application. Instead it links back to the log function."}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"In addition:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"console.debug is not available in Node.js and certain browsers."}),"\n"]})]})}function d(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);