"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2],{8988:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var t=o(4848),i=o(8453);const s={},l="enableDOMLogging (experimental)",r={id:"modules/test-utils/log-to-dom",title:"enableDOMLogging (experimental)",description:"A utility that takes console output and display a copy in the dom for easy debugging. Inspired by tap-browser-color.",source:"@site/../docs/modules/test-utils/log-to-dom.md",sourceDirName:"modules/test-utils",slug:"/modules/test-utils/log-to-dom",permalink:"/probe.gl/docs/modules/test-utils/log-to-dom",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/test-utils/log-to-dom.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"makeSpy",permalink:"/probe.gl/docs/modules/test-utils/make-spy"}},d={},a=[{value:"Usage",id:"usage",level:2},{value:"Function",id:"function",level:2},{value:"enableDOMLogging(options : Any)",id:"enabledomloggingoptions--any",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"enabledomlogging-experimental",children:"enableDOMLogging (experimental)"})}),"\n",(0,t.jsxs)(n.p,{children:["A utility that takes console output and display a copy in the dom for easy debugging. Inspired by ",(0,t.jsx)(n.a,{href:"https://github.com/kirbysayshi/tap-browser-color",children:"tap-browser-color"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {_enableDOMLogging as enableDOMLogging} from '@probe.gl/test-utils';\nenableDOMLogging();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"function",children:"Function"}),"\n",(0,t.jsx)(n.h3,{id:"enabledomloggingoptions--any",children:"enableDOMLogging(options : Any)"}),"\n",(0,t.jsx)(n.p,{children:"Turn DOM logging on/off."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["if ",(0,t.jsx)(n.code,{children:"options"})," is not provided, enable DOM logging with default options."]}),"\n",(0,t.jsxs)(n.li,{children:["if ",(0,t.jsx)(n.code,{children:"options"})," is an object, enable DOM logging. The following options are available:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"container"})," (DOMElement) - the container to log into. If not provided, will append a new ",(0,t.jsx)(n.code,{children:"div"})," to the document."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getStyle"})," (Function) - called when the log updates to get the css styles object for the container."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["if ",(0,t.jsx)(n.code,{children:"options"})," is ",(0,t.jsx)(n.code,{children:"false"}),", disable all DOM logging."]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var t=o(6540);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);