"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[852],{7447:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=s(4848),r=s(8453);const i={},c="Bench",d={id:"modules/bench/bench",title:"Bench",description:"Bench is a benchmark harness that allows you to organize a number of",source:"@site/../docs/modules/bench/bench.md",sourceDirName:"modules/bench",slug:"/modules/bench/",permalink:"/probe.gl/docs/modules/bench/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/bench/bench.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"StatsWidget",permalink:"/probe.gl/docs/modules/stats-widget/"},next:{title:"BrowserDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-driver"}},o={},l=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"group(id)",id:"groupid",level:3},{value:"add",id:"add",level:3},{value:"addAsync",id:"addasync",level:2},{value:"run()",id:"run",level:3},{value:"calibrate",id:"calibrate",level:3}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"bench",children:"Bench"})}),"\n",(0,t.jsx)(n.p,{children:"Bench is a benchmark harness that allows you to organize a number of\nbenchmarks / performance tests into a Benchmark suite that can be executed\nwith a single command."}),"\n",(0,t.jsxs)(n.p,{children:["Each test must be registered with a unique ",(0,t.jsx)(n.code,{children:"id"})," which allows ",(0,t.jsx)(n.code,{children:"Bench"})," to do compare results across runs and perform limited regression testing."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Precise, repeatable performance measuring on a modern multi-tasking OS is hard, as subsequent runs might be scheduled different by the OS. The consistency between repeated benchmark tests tend to be within +- 10-15% and is generally sufficient for verifying incremental improvements."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {Bench} from '@probe.gl/bench';\n\nconst bench = new Bench()\n  .group('Utility tests')\n  .add('Math.sqrt', () => Math.sqrt(100))\n  ;\n\nbench.run();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"new Bench({})"})}),"\n",(0,t.jsx)(n.h3,{id:"groupid",children:"group(id)"}),"\n",(0,t.jsx)(n.p,{children:"Adds a group header."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"bench.group(id)"})}),"\n",(0,t.jsx)(n.h3,{id:"add",children:"add"}),"\n",(0,t.jsx)(n.p,{children:"Adds a test case. Supports multiple signatures:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => unknown)"}),"\n",(0,t.jsx)(n.code,{children:"bench.add(id: string, testFunc: () => unknown)"})]}),"\n",(0,t.jsx)(n.p,{children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," (String) - The unique string for this test. Used as the description of the test in the results."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"testFunc"})," (Function, options) - Function run for each test iteration."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"priority"}),"=",(0,t.jsx)(n.code,{children:"0"})," (Number, optional) - allows controlling which bench cases execute. Can also be specified through the ",(0,t.jsx)(n.code,{children:"options"})," object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"initialize"}),"=: ",(0,t.jsx)(n.code,{children:"() => any"})," initialization function called once before ",(0,t.jsx)(n.code,{children:"testFunc"})," iterations start."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"multiplier"}),"=",(0,t.jsx)(n.code,{children:"1"})," : ",(0,t.jsx)(n.code,{children:"Number"})," Multiplier applied to the number of actual iterations. Use this if each test case already performs a number of iterations. Affects reporting only."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unit"}),"=",(0,t.jsx)(n.code,{children:"'iterations'"}),": Can be used to customize the output message for bench results."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"_throughput"}),"=",(0,t.jsx)(n.code,{children:"false"})," : ",(0,t.jsx)(n.code,{children:"Number"})," Use with ",(0,t.jsx)(n.code,{children:"Bench.addAsync"})," to specify that ",(0,t.jsx)(n.code,{children:"_throughput"})," iterations should be run in parallel. Note that automatic iteration selection is not available in this case."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns: itself for chaining."}),"\n",(0,t.jsx)(n.h2,{id:"addasync",children:"addAsync"}),"\n",(0,t.jsxs)(n.p,{children:["Adds an async test case. Use when ",(0,t.jsx)(n.code,{children:"testFunc"})," returns a promise. Supports same signatures as ",(0,t.jsx)(n.code,{children:"add"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => Promise<unknown>)"}),"\n",(0,t.jsx)(n.code,{children:"bench.add(id: string, testFunc: () => Promise<unknown>)"})]}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"addAsync"}),", ",(0,t.jsx)(n.code,{children:"testFunc"})," is expected to return a promise."]}),"\n",(0,t.jsx)(n.h3,{id:"run",children:"run()"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"bench.run()"})}),"\n",(0,t.jsx)(n.h3,{id:"calibrate",children:"calibrate"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"bench.calibrate(id, func1, func2, opts)"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var t=s(6540);const r={},i=t.createContext(r);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);