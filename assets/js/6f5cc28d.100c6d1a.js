"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[616],{7841:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var o=n(4848),r=n(8453);const s={},l="Console Logging",t={id:"articles/about-logging",title:"Console Logging",description:"Probe API Signature",source:"@site/../docs/articles/about-logging.md",sourceDirName:"articles",slug:"/articles/about-logging",permalink:"/probe.gl/docs/articles/about-logging",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/articles/about-logging.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Usage",permalink:"/probe.gl/docs/get-started/adding-probes"},next:{title:"About Benchmarking",permalink:"/probe.gl/docs/articles/about-benchmarking"}},a={},c=[{value:"Probe API Signature",id:"probe-api-signature",level:3},{value:"Why Double Function Calls?",id:"why-double-function-calls",level:3},{value:"Log Priority",id:"log-priority",level:3},{value:"Log Options",id:"log-options",level:3},{value:"Log Message",id:"log-message",level:3},{value:"Log Parameters",id:"log-parameters",level:3},{value:"Probe Timings",id:"probe-timings",level:2},{value:"Types of Probes",id:"types-of-probes",level:2},{value:"Groups",id:"groups",level:3},{value:"Tables",id:"tables",level:3},{value:"Images",id:"images",level:3}];function d(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"console-logging",children:"Console Logging"})}),"\n",(0,o.jsx)(i.h3,{id:"probe-api-signature",children:"Probe API Signature"}),"\n",(0,o.jsx)(i.p,{children:"A probe.gl function invocation typically looks like this:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"log.probe(priority, message, ...args)();\n"})}),"\n",(0,o.jsx)(i.p,{children:"There are a lot of conventions and built-in capabilities. The following sections contains observations about this signature and provide more background about what is going on."}),"\n",(0,o.jsx)(i.h3,{id:"why-double-function-calls",children:"Why Double Function Calls?"}),"\n",(0,o.jsxs)(i.p,{children:["A distinctive aspect of the probe API is the requirement for double function calls, i.e. the extra parenthesis at the end of ",(0,o.jsx)(i.code,{children:"log.probe``(...)()"}),'. The double function calls ensure that the Chrome browser console\'s clickable links are generated correctly. Thanks to these double parentheses you can click on a probe in the Chrome console and "go" directly to the probe call in your application source code.']}),"\n",(0,o.jsx)(i.p,{children:"The double parenthesis is a rather unusual JavaScript programming idiom and if you forget it nothing will be logged. Therefore probe.gl will keep track of whether a returned log function was called and warn you next time you call probe if it wasn't."}),"\n",(0,o.jsx)(i.h3,{id:"log-priority",children:"Log Priority"}),"\n",(0,o.jsxs)(i.p,{children:["A basic feature of probe.gl is that you can assign a ",(0,o.jsx)(i.code,{children:"priority"})," threshold to each probe. The term ",(0,o.jsx)(i.code,{children:"priority"}),' can seem a little counter-intuitive at first, as specifying a higher value in your probes actually make them less likely to "fire". The basic idea is that a probe will only "fire" if the log priority is greater than or equal to the probe\'s priority.']}),"\n",(0,o.jsxs)(i.p,{children:["Because of this most probe.gl APIs take a ",(0,o.jsx)(i.code,{children:"priority"})," parameter as a first argument."]}),"\n",(0,o.jsxs)(i.p,{children:["| ",(0,o.jsx)(i.code,{children:"0"})," | Unconditional. Always fires. errors and warnings are priority ",(0,o.jsx)(i.code,{children:"0"})," by default. |\n| ",(0,o.jsx)(i.code,{children:"1"})," | Fires . |\n| ",(0,o.jsx)(i.code,{children:"2"})," | Always fires. |\n| ",(0,o.jsx)(i.code,{children:"3"})," | Always fires. |\n| ",(0,o.jsx)(i.code,{children:"4"})," | Always fires. |"]}),"\n",(0,o.jsx)(i.p,{children:"Note that regardless of log level, probes will only fire assuming probe itself is enabled."}),"\n",(0,o.jsx)(i.h3,{id:"log-options",children:"Log Options"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"priority"})," parameter is an overloaded parameter that can be supplied in the following ways:"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"priority"})," can be ommitted entirely. In this case, ",(0,o.jsx)(i.code,{children:"priority"})," defaults to ",(0,o.jsx)(i.code,{children:"0"}),", which means that the probe is executed / printed regardless of log level."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"priority"})," can be a ",(0,o.jsx)(i.code,{children:"Number"}),", in which case it is used as the ",(0,o.jsx)(i.code,{children:"priority"}),' threshold of this probe, which will only "fire" if the log priority is greater than or equal to this value.']}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"priority"})," can be an ",(0,o.jsx)(i.code,{children:"Object"}),", in which case it is used as the ",(0,o.jsx)(i.code,{children:"priority"}),' threshold of this probe. It will only "fire" if the log priority is greater than or equal to this value.']}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"priority"})," (",(0,o.jsx)(i.code,{children:"Number"}),") - as above, if not supplied defaults to ",(0,o.jsx)(i.code,{children:"0"})," (fires unconditonally if probe is enabled)."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"once"})," (",(0,o.jsx)(i.code,{children:"Boolean"}),"|",(0,o.jsx)(i.code,{children:"Number"}),") - if ",(0,o.jsx)(i.code,{children:"true"}),", the argument string will be cached and this log will only be fired once. If a number, this is the minimum amount of seconds between logging the same message."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"log-message",children:"Log Message"}),"\n",(0,o.jsxs)(i.p,{children:["Many probe.gl API calls take a ",(0,o.jsx)(i.code,{children:"message"})," parameter. This ",(0,o.jsx)(i.code,{children:"message"})," is an overloaded parameter that can be either a string or a function that returns a string, which will be called every time the probe fires."]}),"\n",(0,o.jsx)(i.p,{children:"The main purpose of supporting functions is to avoid situations where a message string is being generated even when the probe doesn't fire:"}),"\n",(0,o.jsxs)(i.p,{children:["A typical inconvenience when logging is unwanted performance impact when generating dynamic log messages. In the case below, the string template literal is being generated every time the line executes, ",(0,o.jsx)(i.em,{children:"even when logging is disabled"}),":"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"log.probe(1, `${object} has ${value}`)();\n"})}),"\n",(0,o.jsx)(i.p,{children:"With probe, the solution is easy:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"log.probe(1, () => `${object} has ${value}`)();\n"})}),"\n",(0,o.jsx)(i.p,{children:"Now the performance overhead of the probe is again minimized."}),"\n",(0,o.jsx)(i.h3,{id:"log-parameters",children:"Log Parameters"}),"\n",(0,o.jsx)(i.p,{children:"Most probe method accept a variable number of additional arguments at the end of the function call. These arguments will be passed directly to the underlying console method. This allows you to leverage the built-in Chrome console printing mechanisms for e.g. Objects and Arrays (these allow you to expand and descend into objects)."}),"\n",(0,o.jsx)(i.h2,{id:"probe-timings",children:"Probe Timings"}),"\n",(0,o.jsx)(i.h2,{id:"types-of-probes",children:"Types of Probes"}),"\n",(0,o.jsx)(i.h3,{id:"groups",children:"Groups"}),"\n",(0,o.jsx)(i.p,{children:"Chrome provides a wonderful grouping feature that allows us to organize logs in expandable headers."}),"\n",(0,o.jsx)(i.h3,{id:"tables",children:"Tables"}),"\n",(0,o.jsx)(i.p,{children:"Chrome provides a table logging method"}),"\n",(0,o.jsx)(i.h3,{id:"images",children:"Images"}),"\n",(0,o.jsxs)(i.p,{children:["Under Chrome it is possible to log images to the console, using a rather involved styling trick. ",(0,o.jsx)(i.code,{children:"log.image"})," will be a no-op under all other environments."]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>t});var o=n(6540);const r={},s=o.createContext(r);function l(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);