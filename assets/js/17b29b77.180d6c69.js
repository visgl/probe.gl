"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[852],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),g=i,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3164:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(9668),i=(t(6540),t(5680));const a={},o="Bench",l={unversionedId:"modules/bench/bench",id:"modules/bench/bench",title:"Bench",description:"Bench is a benchmark harness that allows you to organize a number of",source:"@site/../docs/modules/bench/bench.md",sourceDirName:"modules/bench",slug:"/modules/bench/",permalink:"/probe.gl/docs/modules/bench/",draft:!1,editUrl:"https://github.com/visgl/probe.gl/tree/master/docs/../docs/modules/bench/bench.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"StatsWidget",permalink:"/probe.gl/docs/modules/stats-widget/"},next:{title:"BrowserDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-driver"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"group(id)",id:"groupid",level:3},{value:"add",id:"add",level:3},{value:"addAsync",id:"addasync",level:2},{value:"run()",id:"run",level:3},{value:"calibrate",id:"calibrate",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"bench"},"Bench"),(0,i.yg)("p",null,"Bench is a benchmark harness that allows you to organize a number of\nbenchmarks / performance tests into a Benchmark suite that can be executed\nwith a single command. "),(0,i.yg)("p",null,"Each test must be registered with a unique ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," which allows ",(0,i.yg)("inlineCode",{parentName:"p"},"Bench")," to do compare results across runs and perform limited regression testing."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Precise, repeatable performance measuring on a modern multi-tasking OS is hard, as subsequent runs might be scheduled different by the OS. The consistency between repeated benchmark tests tend to be within +- 10-15% and is generally sufficient for verifying incremental improvements.")),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"import {Bench} from '@probe.gl/bench';\n\nconst bench = new Bench()\n  .group('Utility tests')\n  .add('Math.sqrt', () => Math.sqrt(100))\n  ;\n\nbench.run();\n")),(0,i.yg)("h2",{id:"methods"},"Methods"),(0,i.yg)("h3",{id:"constructor"},"constructor"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"new Bench({})")),(0,i.yg)("h3",{id:"groupid"},"group(id)"),(0,i.yg)("p",null,"Adds a group header."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bench.group(id)")),(0,i.yg)("h3",{id:"add"},"add"),(0,i.yg)("p",null,"Adds a test case. Supports multiple signatures:"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => unknown)"),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"bench.add(id: string, testFunc: () => unknown)")),(0,i.yg)("p",null,"Parameters"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"id")," (String) - The unique string for this test. Used as the description of the test in the results."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"testFunc")," (Function, options) - Function run for each test iteration.")),(0,i.yg)("p",null,"Options"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"priority"),"=",(0,i.yg)("inlineCode",{parentName:"li"},"0")," (Number, optional) - allows controlling which bench cases execute. Can also be specified through the ",(0,i.yg)("inlineCode",{parentName:"li"},"options")," object."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"initialize"),"=: ",(0,i.yg)("inlineCode",{parentName:"li"},"() => any")," initialization function called once before ",(0,i.yg)("inlineCode",{parentName:"li"},"testFunc")," iterations start."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"multiplier"),"=",(0,i.yg)("inlineCode",{parentName:"li"},"1")," : ",(0,i.yg)("inlineCode",{parentName:"li"},"Number")," Multiplier applied to the number of actual iterations. Use this if each test case already performs a number of iterations. Affects reporting only."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"unit"),"=",(0,i.yg)("inlineCode",{parentName:"li"},"'iterations'"),": Can be used to customize the output message for bench results."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"_throughput"),"=",(0,i.yg)("inlineCode",{parentName:"li"},"false")," : ",(0,i.yg)("inlineCode",{parentName:"li"},"Number")," Use with ",(0,i.yg)("inlineCode",{parentName:"li"},"Bench.addAsync")," to specify that ",(0,i.yg)("inlineCode",{parentName:"li"},"_throughput")," iterations should be run in parallel. Note that automatic iteration selection is not available in this case.")),(0,i.yg)("p",null,"Returns: itself for chaining."),(0,i.yg)("h2",{id:"addasync"},"addAsync"),(0,i.yg)("p",null,"Adds an async test case. Use when ",(0,i.yg)("inlineCode",{parentName:"p"},"testFunc")," returns a promise. Supports same signatures as ",(0,i.yg)("inlineCode",{parentName:"p"},"add"),". "),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => Promise<unknown>)"),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"bench.add(id: string, testFunc: () => Promise<unknown>)")),(0,i.yg)("p",null,"When using ",(0,i.yg)("inlineCode",{parentName:"p"},"addAsync"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"testFunc")," is expected to return a promise."),(0,i.yg)("h3",{id:"run"},"run()"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bench.run()")),(0,i.yg)("h3",{id:"calibrate"},"calibrate"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bench.calibrate(id, func1, func2, opts)")))}d.isMDXComponent=!0}}]);